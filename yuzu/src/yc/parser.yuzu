; parser.yuzu

; node types
sub AST_PROGRAM()	return 0 end
sub AST_DEFINITION()	return 1 end
sub AST_STATEMENT()	return 2 end
sub AST_LVALUE()	return 3 end
sub AST_RVALUE()	return 4 end
sub AST_BINOP()		return 5 end
sub AST_UNARY()		return 6 end
sub AST_CONSTANT()	return 7 end
sub AST_LEAF()		return 8 end

; node subtypes
sub STATEMENT_LOCAL()		return 0 end
sub STATEMENT_IF()		return 1 end
sub STATEMENT_WHILE()		return 2 end
sub STATEMENT_RETURN()		return 3 end
sub STATEMENT_RVALUE()		return 4 end

sub LVALUE_ID()			return 5 end
sub LVALUE_INDIRECTION()	return 6 end

sub RVALUE_BINOP()		return 7 end
sub RVALUE_FUNCTION_CALL()	return 8 end
sub RVALUE_ASSIGN_WORD()	return 9 end
sub RVALUE_ASSIGN_BYTE()	return 10 end
sub RVALUE_LVALUE_WORD()	return 11 end
sub RVALUE_LVALUE_BYTE()	return 12 end
sub RVALUE_UNARY()		return 13 end
sub RVALUE_PARENS()		return 14 end
sub RVALUE_CONSTANT()		return 15 end

sub ast_get_type(node)		return [node] end
sub ast_get_subtype(node)	return [node + 8] end
sub ast_get_token(node)		return [node + 16] end
sub ast_get_kid(node)		return [node + 24] end
sub ast_get_sibling(node)	return [node + 32] end
sub ast_get_value(node)		return node + 40 end

sub ast_set_type(node,v)	[node] = v end
sub ast_set_subtype(node,v)	[node + 8] = v end
sub ast_set_token(node,v)	[node + 16] = v end
sub ast_set_kid(node,v)		[node + 24] = v end
sub ast_set_sibling(node,v)	[node + 32] = v end

sub AST_SIZE()			return 296 end ; 256 bytes for value field

sub yc_alloc(size)
	local ptr
	ptr = brk(-1)
	brk(ptr + size)
	return ptr
end

sub yc_free(ptr)
end

sub yc_create_node(type)
	local node
	node = yc_alloc(AST_SIZE())
	ast_set_type(node, type)
	ast_set_token(node, 0)
	ast_set_kid(node, 0)
	ast_set_sibling(node, 0)
	return node	
end

sub yc_destroy_node(node)
	if node == 0 then return 0 end
	yc_destroy_node(ast_get_kid(node))
	yc_destroy_node(ast_get_sibling(node))
	yc_free(node)
end

sub yc_append_kid(node, kid)
	local kidList
	kidList = ast_get_kid(node)
	if kidList == 0 then
		ast_set_kid(node, kid)
	else
		while ast_get_sibling(kidList) do
			kidList = ast_get_sibling(kidList)
		end
		ast_set_sibling(kidList, kid)
	end
end

sub yc_accept(buffer, token, parent)
	local i, leafNode, read

	leafNode = yc_create_node(AST_LEAF())
	read = yc_alloc(8)
        i = yc_next_token([buffer], read, ast_get_value(leafNode))
	if token == i then
		ast_set_token(leafNode, token)
		yc_append_kid(parent, leafNode)
		[buffer] = [buffer] + [read]
		yc_free(read)
		return 1
	end
	yc_destroy_node(leafNode)
	yc_free(read)
	return 0
end

sub yc_expect(buffer, token, parent)
	if yc_accept(buffer, token, parent) then
		return 1
	end
	if token == TOKEN_STRING() then
		yc_error("string")
	end
	if token == TOKEN_ID() then
		yc_error("identifier")
	end
	if token == TOKEN_NUMBER() then
		yc_error("number")
	end
	yc_error("todo")
end

sub yc_parse_constant(const, expected, parent)
	local conNode

	conNode = yc_create_node(AST_CONSTANT())

	if yc_accept(const, TOKEN_NUMBER(), conNode) then
		yc_append_kid(parent, conNode)
		return 1
	end

	if yc_accept(const, TOKEN_STRING(), conNode) then
		yc_append_kid(parent, conNode)
		return 1
	end

	yc_destroy_node(conNode)
	if expected then
		yc_error("constant")
	end
	return 0
end

sub yc_parse_unary(op, expected, parent)
	local unNode

	unNode = yc_create_node(AST_UNARY())

	if yc_accept(op, TOKEN_MINUS(), unNode) then
		yc_append_kid(parent, unNode)
		return 1
	end

	if yc_accept(op, TOKEN_NOT(), unNode) then
		yc_append_kid(parent, unNode)
		return 1
	end

	yc_destroy_node(unNode)
	if expected then
		yc_error("unary operator")
	end
	return 0

end

sub yc_parse_binary(op, expected, parent)
	local binNode
	binNode = yc_create_node(AST_BINOP())
	if yc_accept(op, TOKEN_PLUS(), binNode) then
		yc_append_kid(parent, binNode)
		return 1
	end
	if yc_accept(op, TOKEN_MINUS(), binNode) then
		yc_append_kid(parent, binNode)
		return 1
	end
	if yc_accept(op, TOKEN_AND(), binNode) then
		yc_append_kid(parent, binNode)
		return 1
	end
	if yc_accept(op, TOKEN_OR(), binNode) then
		yc_append_kid(parent, binNode)
		return 1
	end
	if yc_accept(op, TOKEN_XOR(), binNode) then
		yc_append_kid(parent, binNode)
		return 1
	end
	if yc_accept(op, TOKEN_RSHIFT(), binNode) then
		yc_append_kid(parent, binNode)
		return 1
	end
	if yc_accept(op, TOKEN_LSHIFT(), binNode) then
		yc_append_kid(parent, binNode)
		return 1
	end
	if yc_accept(op, TOKEN_EQUAL(), binNode) then
		yc_append_kid(parent, binNode)
		return 1
	end
	if yc_accept(op, TOKEN_NOTEQUAL(), binNode) then
		yc_append_kid(parent, binNode)
		return 1
	end
	if yc_accept(op, TOKEN_GEQ(), binNode) then
		yc_append_kid(parent, binNode)
		return 1
	end
	if yc_accept(op, TOKEN_LEQ(), binNode) then
		yc_append_kid(parent, binNode)
		return 1
	end
	if yc_accept(op, TOKEN_GREATERTHAN(), binNode) then
		yc_append_kid(parent, binNode)
		return 1
	end
	if yc_accept(op, TOKEN_LESSTHAN(), binNode) then
		yc_append_kid(parent, binNode)
		return 1
	end
	yc_destroy_node(binNode)
	if expected then
		yc_error("binary operator")
	end
	return 0
end

sub yc_rvalue_binop_check(rvalue, expected, recursive, parent, rNode)
	local binNode

	binNode = yc_create_node(AST_RVALUE())
	ast_set_subtype(binNode, RVALUE_BINOP())
	yc_append_kid(binNode, rNode)
	if recursive == 0 then
		while yc_parse_binary(rvalue, 0, binNode) do
			yc_parse_rvalue(rvalue, 1, 1, binNode)
			rNode = binNode
			binNode = yc_create_node(AST_RVALUE())
			ast_set_subtype(binNode, RVALUE_BINOP())
			yc_append_kid(binNode, rNode)
		end
	end
	yc_free(binNode)
	yc_append_kid(parent, rNode)
end

sub yc_parse_rvalue(rvalue, expected, recursive, parent)
	local r, rNode

	rNode = yc_create_node(AST_RVALUE())
	if yc_parse_lvalue(rvalue, 0, rNode) then
		
		if yc_accept(rvalue, TOKEN_LPAREN(), rNode) then
			ast_set_subtype(rNode, RVALUE_FUNCTION_CALL())
			yc_parse_rvalue(rvalue, 0, 0, rNode)
			while yc_accept(rvalue, TOKEN_COMMA(), rNode) do
				yc_parse_rvalue(rvalue, 1, 0, rNode)
			end
			yc_expect(rvalue, TOKEN_RPAREN(), rNode)
			yc_rvalue_binop_check(rvalue, expected, recursive, parent, rNode)
			return 1
		end

		if yc_accept(rvalue, TOKEN_ASSIGN(), rNode) then
			ast_set_subtype(rNode, RVALUE_ASSIGN_WORD())
			yc_parse_rvalue(rvalue, 1, 0, rNode)
			yc_rvalue_binop_check(rvalue, expected, recursive, parent, rNode)
			return 1
		end

		ast_set_subtype(rNode, RVALUE_LVALUE_WORD())
		yc_rvalue_binop_check(rvalue, expected, recursive, parent, rNode)
		return 1

	end
	if yc_accept(rvalue, TOKEN_BYTE(), rNode) then

		yc_parse_lvalue(rvalue, 1, rNode)

		if yc_accept(rvalue, TOKEN_ASSIGN(), rNode) then
			ast_set_subtype(rNode, RVALUE_ASSIGN_BYTE())
			yc_parse_rvalue(rvalue, 1, 0, rNode)
			yc_rvalue_binop_check(rvalue, expected, recursive, parent, rNode)
			return 1
		end 

		ast_set_subtype(rNode, RVALUE_LVALUE_BYTE())
		yc_rvalue_binop_check(rvalue, expected, recursive, parent, rNode)
		return 1

	end
	if yc_parse_unary(rvalue, 0, rNode) then
		ast_set_subtype(rNode, RVALUE_UNARY())
		yc_parse_rvalue(rvalue, 1, 1, rNode)
		yc_rvalue_binop_check(rvalue, expected, recursive, parent, rNode)
		return 1
	end
	if yc_accept(rvalue, TOKEN_LPAREN(), rNode) then
		ast_set_subtype(rNode, RVALUE_PARENS())
		yc_parse_rvalue(rvalue, 1, 0, rNode)
		yc_expect(rvalue, TOKEN_RPAREN(), rNode)
		yc_rvalue_binop_check(rvalue, expected, recursive, parent, rNode)
		return 1
	end
	if yc_parse_constant(rvalue, 0, rNode) then
		ast_set_subtype(rNode, RVALUE_CONSTANT())
		yc_rvalue_binop_check(rvalue, expected, recursive, parent, rNode)
		return 1
	end
	yc_destroy_node(rNode)
	if expected then
		yc_error("rvalue")
	end
	return 0
end

sub yc_parse_lvalue(lvalue, expected, parent)
	local lNode

	lNode = yc_create_node(AST_LVALUE())

	if yc_accept(lvalue, TOKEN_ID(), lNode) then
		ast_set_subtype(lNode, LVALUE_ID())
		yc_append_kid(parent, lNode)
		return 1
	end

	if yc_accept(lvalue, TOKEN_LBRACKET(), lNode) then
		ast_set_subtype(lNode, LVALUE_INDIRECTION());
		yc_parse_rvalue(lvalue, 1, 0, lNode)
		yc_expect(lvalue, TOKEN_RBRACKET(), lNode)
		yc_append_kid(parent, lNode)
		return 1
	end

	yc_destroy_node(lNode)
	if expected then
		yc_error("lvalue")
	end
	return 0
end

sub yc_parse_statement(state, expected, parent)
	local stateNode 

	stateNode = yc_create_node(AST_STATEMENT())

	if yc_accept(state, TOKEN_LOCAL(), stateNode) then
		ast_set_subtype(stateNode, STATEMENT_LOCAL())
		yc_expect(state, TOKEN_ID(), stateNode)
		while yc_accept(state, TOKEN_COMMA(), stateNode) do
			yc_expect(state, TOKEN_ID(), stateNode)
		end
		yc_append_kid(parent, stateNode)
		return 1
	end

	if yc_accept(state, TOKEN_IF(), stateNode) then
		ast_set_subtype(stateNode, STATEMENT_IF())
		yc_parse_rvalue(state, 1, 0, stateNode)
		yc_expect(state, TOKEN_THEN(), stateNode)
		while yc_parse_statement(state, 0, stateNode) do end
		if yc_accept(state, TOKEN_ELSE(), stateNode) then
			while yc_parse_statement(state, 0, stateNode) do end
		end
		yc_expect(state, TOKEN_END(), stateNode)
		yc_append_kid(parent, stateNode)
		return 1
	end

	if yc_accept(state, TOKEN_WHILE(), stateNode) then
		ast_set_subtype(stateNode, STATEMENT_WHILE())
		yc_parse_rvalue(state, 1, 0, stateNode)
		yc_expect(state, TOKEN_DO(), stateNode)
		while yc_parse_statement(state, 0, stateNode) do end
		yc_expect(state, TOKEN_END(), stateNode)
		yc_append_kid(parent, stateNode)
		return 1
	end

	if yc_accept(state, TOKEN_RETURN(), stateNode) then
		ast_set_subtype(stateNode, STATEMENT_RETURN())
		yc_parse_rvalue(state, 1, 0, stateNode)
		yc_append_kid(parent, stateNode)
		return 1
	end

	if yc_parse_rvalue(state, 0, 0, stateNode) then
		ast_set_subtype(stateNode, STATEMENT_RVALUE())
		yc_append_kid(parent, stateNode)
		return 1
	end

	yc_destroy_node(stateNode)
	if expected then
		yc_error("statement")
	end
	return 0
end

sub yc_parse_definition(def, expected, parent)
	local defNode
	defNode = yc_create_node(AST_DEFINITION())
	if yc_accept(def, TOKEN_SUB(), defNode) then
		yc_expect(def, TOKEN_ID(), defNode)
		yc_expect(def, TOKEN_LPAREN(), defNode)
		if yc_accept(def, TOKEN_ID(), defNode) then
			while yc_accept(def, TOKEN_COMMA(), defNode) do
				yc_expect(def, TOKEN_ID(), defNode)
			end
		end
		yc_expect(def, TOKEN_RPAREN(), defNode)
		while yc_parse_statement(def, 0, defNode) do end
		yc_expect(def, TOKEN_END(), defNode)
		yc_append_kid(parent, defNode)
		return 1
	end
	yc_destroy_node(defNode)
	if expected then
		yc_error("definition")
	end
	return 0
end

sub yc_parse_program(program)
	local progNode
	progNode = yc_create_node(AST_PROGRAM())
	while yc_parse_definition(program, 0, progNode) do end
	return progNode
end
