; fruity editor

sub malloc(size)
	local ptr
	ptr = brk(-1)
	brk(ptr + size)
	return ptr
end

sub puts(strPtr)
	local c
	while c = byte [strPtr] do
		putch(c)
		strPtr = strPtr + 1
	end
	return 0
end

sub nextarg(strPtr)
	local c
	while c = byte [strPtr] do
		strPtr = strPtr + 1
	end
	return strPtr + 1
end

sub fr_mod(n, d)
	local r, q
	r = n
	q = 0
	while r >= d do
		r = r - d
		q = q + 1
	end
	return r
end

sub fr_div(n, d)
        local r, q
        r = n
        q = 0
        while r >= d do
                r = r - d
                q = q + 1
        end
        return q
end

sub fr_mul(a, b)
	local r
	while b > 0 do
		r = r + a
		b = b - 1
	end
	return r
end

sub atoi(str)
	local n, d, x
	while n < strlen(str) do
		x = fr_mul(x, 10)
		d = byte [str + n] - byte ["0"]
		x = x + d
		n = n + 1
	end
	return x
end

sub putn(x)
        local digit, i, leading
        if x == 0 then
                puts("0")
                return 0
        end
        leading = 1
        i = 1000000
        while i > 0 do
                digit = fr_div(x, i)
                if digit != 0 then
                        leading = 0
                end
                if leading == 0 then    
                        putch(digit + byte ["0"])
                end
                x = fr_mod(x, i)
                i = fr_div(i, 10)
        end
end

sub strcmp(a, b)
	while (byte [a] == byte [b]) & (byte [a] != 0) & (byte [b] != 0) do
		a = a + 1
		b = b + 1
	end
	return (byte [a] == byte[b])
end

sub strlen(str)
	local i
	while byte [str + i] != 0 do
		i = i + 1
	end
	return i
end

sub repl(editBuffer, backBuffer, filename)
	local f, c, prevc, i, argc, j, k, n, line, done, x, startLine, endLine, arg1, arg2

	line = malloc(1024)
	done = 0
	while done == 0 do
		i = 0
		x = 0
		prevc = 32
		puts(": ")
		argc = 0
		c = getch()
		while byte c != 10 do
			if (byte c == 32) & (byte prevc != 32) then
				byte [line + i] = 0
				i = i + 1
				argc = argc + 1
			end
			if byte c != 32 then	
				byte [line + i] = byte c
				i = i + 1
			end
			prevc = c
			c = getch()
		end
		byte [line + i] = 0
		if strcmp(line, "d") & (argc > 0) then ; delete
			x = 1
			if argc == 1  then
				arg1 = nextarg(line)
				startLine = atoi(arg1)
				endLine = atoi(arg1)
			end
			if argc == 2 then
				arg1 = nextarg(line)
				arg2 = nextarg(arg1)
				startLine = atoi(arg1)
				endLine = atoi(arg2)
			end	
			k = 0
			j = 0
			i = 0
			while byte [editBuffer + k] != 0 do
				if (j < startLine) | (j > endLine) then
					byte [editBuffer + i] = byte [editBuffer + k]
					i = i + 1
				end
				if byte [editBuffer + k] == 10 then
					j = j + 1
				end
				k = k + 1
			end
			byte [editBuffer + i] = 0
		end
		if strcmp(line, "l") then ; list
			if argc == 2 then
				arg1 = nextarg(line)
				arg2 = nextarg(arg1)
				startLine = atoi(arg1)
				endLine = atoi(arg2)
			else
				startLine = 0
				endLine = 65536
			end
			x = 1
			j = 0
			k = 0
			if startLine == 0 then
				puts("0 ")
			end
			while byte [editBuffer + k] != 0 do
				if byte [editBuffer + k] == 10 then
					j = j + 1
					if (j >= startLine) & (j <= endLine) then
						putch(10)
						putn(j)
						putch(32)
					end
				else
					if (j >= startLine) & (j <= endLine) then
						putch(byte [editBuffer + k])
					end
				end
				k = k + 1
			end
			putch(10)
		end
		if strcmp(line, "q") then ; quit
			x = 1
			done = 1
		end
		if strcmp(line, "s") & (argc == 1) then ; save
			x = 1
			f = creat(nextarg(line))
			if f <= 0 then
				puts("unable to save file")
			else
				write(f, editBuffer, strlen(editBuffer))
			end
			close(f)
		end
		if strcmp(line, "e") & (argc == 1) then ; enter
			x = 1
			arg1 = nextarg(line)
			startLine = atoi(arg1)
			k = 0
			j = 0
			i = 0
			byte [line] = 0
			while j == startLine do
				c = getch()
				if byte c != 10 then
					byte [line + n] = c
					n = n + 1
					byte [line + n] = 0
				else
					if strcmp(line, ".") then
						j = j + 1
					else
						n = 0
						while byte [line + n] != 0 do
							byte [backBuffer + i] = byte [line + n]
							n = n + 1
							i = i + 1
						end
						byte [backBuffer + i] = 10
						i = i + 1
					end
					n = 0
					byte [line] = 0
				end
			end
			while byte [editBuffer + k] != 0 do
				if byte [editBuffer + k] == 10 then
					j = j + 1
				end
				byte [backBuffer + i] = byte [editBuffer + k]
				i = i + 1
				k = k + 1
				n = 0
				byte [line] = 0
				while j == startLine do
					c = getch()
					if byte c != 10 then
						byte [line + n] = c
						n = n + 1
						byte [line + n] = 0
					else
						if strcmp(line, ".") then
							j = j + 1
						else
							n = 0
							while byte [line + n] != 0 do
								byte [backBuffer + i] = byte [line + n]
								n = n + 1
								i = i + 1
							end
							byte [backBuffer + i] = 10
							i = i + 1
						end
						n = 0
						byte [line] = 0
					end
				end
			end
			byte [backBuffer + i] = 0
			i = 0
			while byte [backBuffer + i] != 0 do
				byte [editBuffer + i] = byte [backBuffer + i]
				i = i + 1
			end
			byte [editBuffer + i] = 0
		end
		if x == 0 then
			puts("?")
			putch(10)
		end
	end
end

sub main(argc, argv)

	local f, filename, editBuffer, backBuffer, i

	if (argc != 2) & (argc != 1) then
		puts("usage: fred [filename]")
		putch(10)
		exit()
	end

	editBuffer = malloc(1048576)
	backBuffer = malloc(1048576)
	while i < 1048576 do
		byte [editBuffer + i] = 0
		byte [backBuffer + i] = 0
		i = i + 1
	end

	if argc == 2 then
		filename = nextarg(argv)
		f = open(filename, 0)
		if f > 0 then
			i = 0
			while read(f, editBuffer + i, 1) > 0 do
				i = i + 1
			end
		end	
		close(f)
	end

	repl(editBuffer, backBuffer, filename)
	return 0
end
