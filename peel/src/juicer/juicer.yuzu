
sub malloc(size)
	local ptr
	ptr = brk(-1)
	brk(ptr + size)
	return ptr
end

sub puts(strPtr)
	local c
	while c = byte [strPtr] do
		putch(c)
		strPtr = strPtr + 1
	end
	return 0
end

sub nextarg(strPtr)
	local c
	while c = byte [strPtr] do
		strPtr = strPtr + 1
	end
	return strPtr + 1
end

sub mod(n, d)
	local r, q
	r = n
	q = 0
	while r >= d do
		r = r - d
		q = q + 1
	end
	return r
end

sub compress(fin, fout)
	local bytePtr, c, e, windowPtr, windowSize, i, j, filePtr, fileSize, encoderPos,
		distance, length, done, bestLength, bestDistance

	bytePtr = malloc(3)
	filePtr = malloc(1 << 20)
	windowPtr = malloc(1024)
	windowSize = 0

	fileSize = 0
	while read(fin, bytePtr, 1) > 0 do
		byte [filePtr + fileSize] = byte [bytePtr]
		fileSize = fileSize + 1
	end

	encoderPos = 0
	while (encoderPos < fileSize) do

		distance = 0
		bestLength = 0
		bestDistance = 0
		while distance < windowSize do
			length = 0
			done = 0
			while (encoderPos + length < fileSize) & (done == 0) & (length < 63) do
				c = byte [filePtr + encoderPos + length]
				e = byte [windowPtr + distance - mod(length, distance + 1)]
				if c == e then
					length = length + 1
				else
					done = 1
				end
			end
			if length > bestLength then
				bestLength = length
				bestDistance = distance
			end
			distance = distance + 1
		end

		if bestLength > 3 then
			byte [bytePtr + 0] = 255
			[bytePtr + 1] = ((bestDistance & 1023) << 6) | (bestLength & 63)
			write(fout, bytePtr, 3)
		else
			bestLength = 1;
			byte [bytePtr] = byte[filePtr + encoderPos]
			if byte [bytePtr] == 255 then
				byte [bytePtr + 1] = 0
				byte [bytePtr + 2] = 0
				write(fout, bytePtr, 3)
			else
				write(fout, bytePtr, 1)
			end
		end

		j = 0
		while j < bestLength do
			c = byte [filePtr + encoderPos + j]
			if windowSize < 1024 then
				windowSize = windowSize + 1
			end
			i = windowSize - 1
			while i > 0 do
				byte [windowPtr + i] = byte [windowPtr + i - 1]
				i = i - 1
			end
			byte [windowPtr] = c
			j = j + 1
		end
		encoderPos = encoderPos + bestLength
	end
	byte [bytePtr + 0] = 255
	byte [bytePtr + 1] = 1
	byte [bytePtr + 2] = 0
	write(fout, bytePtr, 3)
end

sub decompress(fin, fout)
	local filePtr, fileSize, bytePtr, length, distance, i
	filePtr = malloc(1 << 20)
	bytePtr = malloc(2)

	while read(fin, bytePtr, 1) > 0 do
		if byte [bytePtr] == 255 then
			read(fin, bytePtr, 2)
			length = [bytePtr] & 63
			distance = ([bytePtr] >> 6) & 1023
			if (length == 0) then
				byte [filePtr + fileSize] = 255
				fileSize = fileSize + 1
			else
				if (length == 1) then
					write(fout, filePtr, fileSize)
					return 0
				else
					i = 0
					while i < length do
						byte [filePtr + fileSize + i] = byte [filePtr + fileSize + i - distance - 1]
						i = i + 1
					end
					fileSize = fileSize + length
				end
			end
		else
			byte [filePtr + fileSize] = byte [bytePtr]
			fileSize = fileSize + 1
		end
	end
	write(fout, filePtr, fileSize)
	return 0
end

sub main(argc, argv)
	local fin, fout, mode
	if argc != 4 then
		puts("usage: juicer d|c infile outfile")
		putch(10)
		exit()
	end

	argv = nextarg(argv)
	mode = byte [argv]
	argv = nextarg(argv)
	fin = open(argv, 0)
	if fin <= 0 then
		puts("Unable to open file")
		putch(10)
		exit()
	end
	argv = nextarg(argv)
	fout = creat(argv)
	if fout <= 0 then
		puts("Unable to create file")
		putch(10)
		close(fin)
		exit()
	end
	if byte mode == byte ["d"] then
		decompress(fin, fout)
	else
		if byte mode == byte ["c"] then
			compress(fin, fout)
		else
			puts("unrecognized mode")
			putch(10)
			close(fin)
			close(fout)
			exit()
		end
	end
	close(fin)
	close(fout)
	return 0
end
