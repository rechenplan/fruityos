;  usage: inode file
;  print the contents of file inode to stdout

sub strlen(str)
        local i
        while byte [str + i] != 0 do
                i = i + 1
        end
        return i
end

sub fr_mod(n, d)
        local r, q
        r = n
        q = 0
        while r >= d do
                r = r - d
                q = q + 1
        end
        return r
end

sub fr_div(n, d)
        local r, q
        r = n
        q = 0
        while r >= d do
                r = r - d
                q = q + 1
        end
        return q
end

sub fr_mul(a, b)
        local r
        while b > 0 do
                r = r + a
                b = b - 1
        end
        return r
end

sub atoi(str)
        local n, d, x
        while n < strlen(str) do
                x = fr_mul(x, 10)
                d = byte [str + n] - byte ["0"]
                x = x + d
                n = n + 1
        end
        return x
end

sub putn(x)
        local digit, i, leading
        if x == 0 then
                puts("0")
                return 0
        end
        leading = 1
        i = 1000000
        while i > 0 do
                digit = fr_div(x, i)
                if digit != 0 then
                        leading = 0
                end
                if leading == 0 then
                        putch(digit + byte ["0"])
                end
                x = fr_mod(x, i)
                i = fr_div(i, 10)
        end
end

sub malloc(size)
	local ptr
	ptr = brk(-1)
	brk(ptr + size)
	return ptr
end

sub puts(strPtr)
	local c
	while c = byte [strPtr] do
		putch(c)
		strPtr = strPtr + 1
	end
	return 0
end

sub nextarg(strPtr)
	local c
	while c = byte [strPtr] do
		strPtr = strPtr + 1
	end
	return strPtr + 1
end

sub inode_getName(inode)
        return inode
end

sub inode_getType(inode)
        return [inode + 16] & ((1 << 32) - 1)
end

sub inode_getContentSize(inode)
        return [inode + 20] & ((1 << 32) - 1)
end

sub inode_getContent(inode)
        return [inode + 24]
end

sub fba_getNext(blockAddr)
        local nodeAddr, nextNodeAddr, nextBlockAddr
        nodeAddr = blockAddr - list_getNodeHdrSize()
        nextNodeAddr = list_getNext(nodeAddr)
        nextBlockAddr = nextNodeAddr + list_getNodeHdrSize()
        return nextBlockAddr
end

sub fba_getPrev(blockAddr)
        local nodeAddr, prevNodeAddr, prevBlockAddr
        nodeAddr = blockAddr - list_getNodeHdrSize()
        prevNodeAddr = list_getPrev(nodeAddr)
        prevBlockAddr = prevNodeAddr + list_getNodeHdrSize()
        return prevBlockAddr
end

sub list_getNext(nodeAddr)
        return [nodeAddr + (0 << 3)]
end

sub list_getPrev(nodeAddr, nextNodeAddr)
        return [nodeAddr + (1 << 3)]
end

sub list_getNodeHdrSize()
        return 2 << 3
end

sub main(argc, argv)
	local fd, inode
	if argc != 2 then
		puts("usage: inode file")
		putch(10)
		return 0
	end
	argv = nextarg(argv)
	fd = open(argv, 0)
	if fd == 0 then
		puts("Unable to open file")
	end

	inode = [fd]
	puts("Addr: ")
	putn(inode)
	putch(10)
	puts("Name: ")
	puts(inode_getName(inode))	
	putch(10)
	puts("Type: ")
	putn(inode_getType(inode))
	putch(10)
	puts("Prev: ")
	putn(fba_getPrev(inode))
	putch(10)
	puts("Next: ")
	putn(fba_getNext(inode))
	putch(10)
end
