sub kmemcpy(a, b, cnt)
	while cnt > 0 do
		byte [a] = byte [b]
		a = a + 1
		b = b + 1
		cnt = cnt - 1
	end
end

sub kmemset(ptr, size, value)
	local i
	while i < size do
		byte [ptr + i] = value
		i = i + 1
	end
end

sub kstrcpy(a, b)
	kmemcpy(a, b, kstrlen(b) + 1)
end

sub kcls()
	scr_cls(global_getScr())
end

sub kgetch()
	return sys_getch()
end

sub kputch(c)
	sys_putch(c)
end

sub kputs(str)
	while byte [str] != 0 do
		kputch(byte [str])
		str = str + 1
	end
end

sub kprintln(str)
	kputs(str)
	kputch(10)
end

sub kputn(x)
        local digit, i, leading
        if x == 0 then
                kputs("0")
                return 0
        end
        leading = 1
        i = 1000000
        while i > 0 do
                digit = x86_div(x, i)
                if digit != 0 then
                        leading = 0
                end
                if leading == 0 then    
                        kputch(digit + byte ["0"])
                end
                x = x86_mod(x, i)
                i = x86_div(i, 10)
        end
end


sub kstrlen(str)
	local i
	while byte [str + i] != 0 do
		i = i + 1
	end
	return i
end

sub kstrcmp(a, b)
	while (byte [a] == byte [b]) & (byte [a] != 0) do
		a = a + 1
		b = b + 1
	end
	return (byte [a] == byte [b])
end

sub kunpack(jarBuffer)
        local fileName, fileSize, tmpPtr, filePtr, fout

        tmpPtr = jarBuffer
        while 1 do
		fileName = tmpPtr
		if byte [fileName] == 0 then
			return 0
		end
		tmpPtr = tmpPtr + kstrlen(fileName) + 1
		fileSize = [tmpPtr]
		tmpPtr = tmpPtr + 8
		filePtr = tmpPtr
		tmpPtr = tmpPtr + fileSize
                if byte [fileName + kstrlen(fileName) - 1] == byte ["/"] then
                        sys_mkdir(fileName)
                else
                        fout = sys_creat(fileName, 0)
                        sys_write(fout, filePtr, fileSize)
                        sys_close(fout)
                end
        end
end

sub kdecrunch(fin, filePtr)
        local fileSize, bytePtr, length, distance, i, bytesRead

        bytePtr = heap_alloc(2)
        while sys_read(fin, bytePtr, 1) > 0 do
                if byte [bytePtr] == 255 then
                        sys_read(fin, bytePtr, 2)
			bytesRead = bytesRead + 2
                        length = [bytePtr] & 63
                        distance = ([bytePtr] >> 6) & 1023
                        if (length == 0) then
                                byte [filePtr + fileSize] = 255
                                fileSize = fileSize + 1
                        else
                                if (length == 1) then
					heap_free(bytePtr, 2)
                                        return fileSize
                                else
                                        i = 0
                                        while i < length do
                                                byte [filePtr + fileSize + i] = byte [filePtr + fileSize + i - distance - 1]
                                                i = i + 1
                                        end
                                        fileSize = fileSize + length
                                end
                        end
                else
                        byte [filePtr + fileSize] = byte [bytePtr]
                        fileSize = fileSize + 1
                end
		bytesRead = bytesRead + 1
        end
	heap_free(bytePtr, 2)
        return fileSize
end
