
sub heap_printStats()
	kputs("Heap statistics:")
	kputch(10)

	kputs("   32 byte blocks: ")
	kputn(fba_getAvailableBlocks(heap_addr32()))
	kputch(10)

	kputs("  512 byte blocks: ")
	kputn(fba_getAvailableBlocks(heap_addr512()))
	kputch(10)

	kputs(" 1024 byte blocks: ")
	kputn(fba_getAvailableBlocks(heap_addr1024()))
	kputch(10)
end

sub heap_getBaseAddr()
	return 6 << 16
end

sub heap_size32()
	return 64 << 10
end

sub heap_size512()
	return 64 << 10
end

sub heap_size1024()
	return 1 << 20
end

sub heap_addr32()
	return heap_getBaseAddr()
end

sub heap_addr512()
	return heap_addr32() + heap_size32()
end

sub heap_addr1024()
	return 1 << 20
end

sub heap_init()
	fba_init(heap_addr32(), heap_size32(), 32)
	fba_init(heap_addr512(), heap_size512(), 512)
	fba_init(heap_addr1024(), heap_size1024(), 1024)
	return 0
end

sub heap_alloc(size)
	if size <= 32 then
		return fba_alloc(heap_addr32())
	end
	if size <= 512 then
		return fba_alloc(heap_addr512())
	end
	if size <= 1024 then
		return fba_alloc(heap_addr1024())
	end
	return 0
end

sub heap_free(blockAddr, size)
	if size <= 32 then
		fba_free(heap_addr32(), blockAddr)
		return 0
	end
	if size <= 512 then
		fba_free(heap_addr512(), blockAddr)
		return 0
	end
	if size <= 1024 then
		fba_free(heap_addr1024(), blockAddr)
		return 0
	end
	return -1
end
