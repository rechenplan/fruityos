; ram disk

sub ramfs_init(ramfs)
	local dot, dotdot, cwd
	ramfs_setRoot(ramfs, inode_create("", INODE_TYPE_DIR()))
	dot = inode_create(".", INODE_TYPE_LINK())
	dotdot = inode_create("..", INODE_TYPE_LINK())
	inode_setContent(dot, ramfs_getRoot(ramfs))
	inode_setContent(dotdot, ramfs_getRoot(ramfs))
	inode_link(ramfs_getRoot(ramfs), dot)
	inode_link(ramfs_getRoot(ramfs), dotdot)
	[ramfs + (1 << 3)] = heap_alloc(1024)
	ramfs_setCwd(ramfs, "/")
end

sub ramfs_cleanup(ramfs)
	ramfs_deleteFile_r(ramfs, 0, ramfs_getRoot(ramfs))
	heap_free([ramfs + (1 << 3)], 1024)
end

sub ramfs_getSize()
	return (2 << 3)
end

sub ramfs_getRoot(ramfs)
	return [ramfs + (0 << 3)]
end

sub ramfs_setRoot(ramfs, rootNode)
	[ramfs + (0 << 3)] = rootNode
end

sub ramfs_getCwd(ramfs)
	return [ramfs + (1 << 3)]
end

sub ramfs_setCwd(ramfs, newCwd)
	local cwd, len, buffer, i
	cwd = ramfs_getCwd(ramfs)

	buffer = heap_alloc(1024)
	ramfs_nameToAbsName(ramfs, newCwd, buffer)
	if ramfs_canonicalizeName(ramfs, buffer) == -1 then
		heap_free(buffer, 1024)
		return -1
	end
	if ramfs_lookupPath(ramfs, buffer) == 0 then
		heap_free(buffer, 1024)
		return -1
	end
	len = kstrlen(buffer)
	kstrcpy(cwd, buffer)
	; Make sure cwd ends with forward slash
	if byte [cwd + len - 1] != byte ["/"] then
		byte [cwd + len] = byte ["/"]
		byte [cwd + len + 1] = 0
	end
	heap_free(buffer, 1024)
	return 0
end

sub ramfs_printTree(ramfs)
	local inode
	inode = ramfs_getRoot(ramfs)
	ramfs_printTree_r(inode, 0)
end

sub ramfs_printTree_r(inode, level)
	local i
	while i < level do
		kputs("    ")
		i = i + 1
	end

	if inode_getType(inode) == INODE_TYPE_FILE() then
		kputs(inode_getName(inode))
		kputch(32)
		kputn(inode_getContentSize(inode))
		kputs(" bytes")
		kputch(10)
		return 0
	end
	if inode_getType(inode) == INODE_TYPE_DIR() then
		kputs("[")
		kputs(inode_getName(inode))
		kputs("]")
		kputch(10)
		inode = inode_getContent(inode)
		while inode != 0 do
			ramfs_printTree_r(inode, level + 1)
			inode = fba_getNext(inode)
		end
		return 0
	end
	if inode_getType(inode) == INODE_TYPE_LINK() then
		kputs("<")
		kputs(inode_getName(inode))
		kputs(">")
		kputch(10)
		return 0
	end

	kputs(inode_getName(inode))
	kputs(" (bad type ")
	kputn(inode_getType(inode))
	kputs(")")
	kputch(10)

end

sub ramfs_createFile(ramfs, name, type)
	local inode, parent, buffer, filename, path, dot, dotdot

	buffer = heap_alloc(1024)
	ramfs_nameParse(ramfs, name, buffer)
	filename = ramfs_getFilename(buffer)
	path = ramfs_getPath(buffer)
	parent = ramfs_lookupPath(ramfs, path)
	if (parent != 0) then
		if inode_lookupByName(parent, filename) == 0 then
			inode = inode_create(filename, type)
			inode_link(parent, inode)
			if (type == INODE_TYPE_DIR()) then
				dot = inode_create(".", INODE_TYPE_LINK())
				dotdot = inode_create("..", INODE_TYPE_LINK())
				inode_setContent(dot, inode)
				inode_setContent(dotdot, parent)
				inode_link(inode, dot)
				inode_link(inode, dotdot)
			end
			heap_free(buffer, 1024)
			return inode
		end
	end

	heap_free(buffer, 1024)
	return 0
end

sub ramfs_renameFile(ramfs, oldname, newname)
	local oldbuffer, oldpath, oldfilename, oldparent, newbuffer, newpath, newfilename, newparent, inode
	if ramfs_getFile(ramfs, newname) != 0 then
		ramfs_deleteFile(ramfs, newname)
	end
	oldbuffer = heap_alloc(1024)
	ramfs_nameParse(ramfs, oldname, oldbuffer)
	oldfilename = ramfs_getFilename(oldbuffer)
	oldpath = ramfs_getPath(oldbuffer)
	oldparent = ramfs_lookupPath(ramfs, oldpath)
	if (oldparent == 0) then
		heap_free(oldbuffer, 1024)
		return -1
	end
	inode = inode_lookupByName(oldparent, oldfilename)
	if (inode == 0) then
		heap_free(oldbuffer, 1024)
		return -1
	end
	newbuffer = heap_alloc(1024)
	ramfs_nameParse(ramfs, newname, newbuffer)
	newfilename = ramfs_getFilename(newbuffer)
	newpath = ramfs_getPath(newbuffer)
	newparent = ramfs_lookupPath(ramfs, newpath)
	if (newparent == 0) then
		heap_free(oldbuffer, 1024)
		heap_free(newbuffer, 1024)
		return -1
	end
	inode_unlink(oldparent, inode)
	inode_link(newparent, inode)
	inode_setName(inode, newfilename)
	heap_free(oldbuffer, 1024)
	heap_free(newbuffer, 1024)
	return 0
end

sub ramfs_getFile(ramfs, name)
	local inode, parent, buffer, filename, path

	buffer = heap_alloc(1024)
	ramfs_nameParse(ramfs, name, buffer)
	filename = ramfs_getFilename(buffer)
	path = ramfs_getPath(buffer)
	parent = ramfs_lookupPath(ramfs, path)
	if (parent != 0) then
		; This happens if we're opening root (HACK)
		if kstrlen(filename) == 0 then
			heap_free(buffer, 1024)
			return parent
		else
			inode = inode_lookupByName(parent, filename)
			heap_free(buffer, 1024)
			return inode
		end
	end
	heap_free(buffer, 1024)
	return 0
end

sub ramfs_deleteFile(ramfs, name)
	local inode, parent, buffer, filename, path

	buffer = heap_alloc(1024)
	ramfs_nameParse(ramfs, name, buffer)
	filename = ramfs_getFilename(buffer)
	path = ramfs_getPath(buffer)
	parent = ramfs_lookupPath(ramfs, path)
	if (parent != 0) then
		inode = inode_lookupByName(parent, filename)
		if (inode != 0) then
			ramfs_deleteFile_r(ramfs, parent, inode)
		end
	end
	heap_free(buffer, 1024)
end

sub ramfs_deleteFile_r(ramfs, parent, inode)
	local inode, content, next

	if inode_getType(inode) == INODE_TYPE_DIR() then
		content = inode_getContent(inode)
		while content != 0 do
			next = fba_getNext(content)
			ramfs_deleteFile_r(ramfs, inode, content)
			content = next
		end
	end

	if inode_getType(inode) == INODE_TYPE_FILE() then
		content = inode_getContent(inode)
		while content != 0 do
			next = fba_getNext(content)
			heap_free(content, fd_getDataBlockSize())
			content = next
		end 
	end 

	if (parent != 0) then
		inode_unlink(parent, inode)
	end
	inode_destroy(inode)
end

; INTERNAL USAGE

sub ramfs_getPath(name)
	return name
end

sub ramfs_getFilename(name)
	return name + kstrlen(name) + 1
end

sub ramfs_nameParse(ramfs, nameIn, nameOut)
	local i, len, file
	ramfs_nameToAbsName(ramfs, nameIn, nameOut)
	i = kstrlen(nameOut) - 1
	while (i >= 0)  do
		if byte [nameOut + i] == byte ["/"] then
			byte [nameOut + i] = 0
			if kstrlen(ramfs_getFilename(nameOut)) > 0 then
				return 0
			end
		end
		i = i - 1
	end
	return 0
end

sub ramfs_nameToAbsName(ramfs, name, absName)
	local len
	if byte [name] == byte ["/"] then
		kstrcpy(absName, name)
	else
		kstrcpy(absName, ramfs_getCwd(ramfs))
		len = kstrlen(absName)
		kstrcpy(absName + len, name)
	end

	; parse dots (TODO)
	return 0
end

sub ramfs_lookupPath(ramfs, path)
	local tmpPath, i, len, inode, dir, dirLen

	tmpPath = heap_alloc(1024)
	kstrcpy(tmpPath, path)
	len = kstrlen(tmpPath)
	while i < len do
		if byte [tmpPath + i] == byte ["/"] then
			byte [tmpPath + i] = 0
		end
		i = i + 1
	end
	i = 0
	inode = ramfs_getRoot(ramfs)
	while (i < len) & (inode != 0) do
		if (inode_getType(inode) != INODE_TYPE_DIR()) then
			heap_free(tmpPath, 1024)
			return 0
		end
		dir = tmpPath + i
		dirLen = kstrlen(dir)
		if (dirLen > 0) then
			inode = inode_lookupByName(inode, dir)
			if (inode_getType(inode) == INODE_TYPE_LINK()) then
				inode = inode_getContent(inode)
			end
		end
		i = i + dirLen + 1
	end
	heap_free(tmpPath, 1024)
	return inode
end

sub ramfs_canonicalizeName(ramfs, name)
	local dir, dirLen, inodePtr, prevInodePtr
	dir = ramfs_getFile(ramfs, name)
	if dir == 0 then
		return -1
	end
	while dir != 0 do
		if inode_getType(dir) != INODE_TYPE_LINK() then
			prevInodePtr = inodePtr
			inodePtr = heap_alloc(8)
			[inodePtr] = dir
			fba_setNext(inodePtr, prevInodePtr)
			dir = fba_getPrev(dir) ; up one dir
		else
			dir = inode_getContent(dir)
		end	
	end
	while inodePtr != 0 do
		dir = inode_getName([inodePtr])
		dirLen = kstrlen(dir)
		if dirLen > 0 then
			byte [name] = byte ["/"]
			name = name + 1
			kstrcpy(name, dir)
			name = name + dirLen
		end
		prevInodePtr = inodePtr
		inodePtr = fba_getNext(inodePtr)
		heap_free(prevInodePtr, 8)
	end
	byte [name] = 0
	return 0
end
